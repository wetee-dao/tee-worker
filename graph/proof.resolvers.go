package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.42

import (
	"context"
	"encoding/json"

	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/wetee-dao/go-sdk/gen/types"
	"wetee.app/worker/mint/proof"
	"wetee.app/worker/util"
)

// WorkLogList is the resolver for the WorkLogList field.
func (r *queryResolver) WorkLogList(ctx context.Context, workType string, workID int, page int, size int) (string, error) {
	list, err := proof.ListLogsById(types.WorkId{
		Id:    uint64(workID),
		Wtype: util.GetWorkType(workType),
	}, page, size)
	if err != nil {
		return "", gqlerror.Errorf("WorkLogList:" + err.Error())
	}

	bt, err := json.Marshal(list)
	if err != nil {
		return "", gqlerror.Errorf("JsonMarshal:" + err.Error())
	}

	return string(bt), nil
}

// WorkMetricList is the resolver for the WorkMetricList field.
func (r *queryResolver) WorkMetricList(ctx context.Context, workType string, workID int, page int, size int) (string, error) {
	list, err := proof.ListMonitoringsById(types.WorkId{
		Id:    uint64(workID),
		Wtype: util.GetWorkType(workType),
	}, page, size)

	if err != nil {
		return "", gqlerror.Errorf("WorkLogList:" + err.Error())
	}

	bt, err := json.Marshal(list)
	if err != nil {
		return "", gqlerror.Errorf("JsonMarshal:" + err.Error())
	}

	return string(bt), nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
