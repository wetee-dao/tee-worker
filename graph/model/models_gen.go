// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Contract struct {
	// Start of block number
	StartNumber string `json:"StartNumber"`
	// User address
	User string `json:"User"`
	// Work id
	WorkID string `json:"WorkId"`
}

type LoginContent struct {
	// User SS58 address
	Address string `json:"address"`
	// User sign time
	Timestamp int64 `json:"timestamp"`
}

type Mutation struct {
}

type Query struct {
}

type User struct {
	// User SS58 address
	Address string `json:"address"`
	// User sign time
	Timestamp int64 `json:"timestamp"`
	// Is the root of cluster
	IsRoot bool `json:"isRoot"`
}

type Role string

const (
	// admin user
	RoleAdmin Role = "ADMIN"
	// user
	RoleUser Role = "USER"
)

var AllRole = []Role{
	RoleAdmin,
	RoleUser,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleUser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
